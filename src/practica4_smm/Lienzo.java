/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package practica4_smm;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;

/**
 *
 * @author rober
 */
public class Lienzo extends javax.swing.JPanel {
    private Point pressedPoint = null;
    private List<Shape> vShape = new ArrayList();
    private Shape forma = new MiLinea.Float();
    private HerramientaDibujo herramienta = HerramientaDibujo.LINE;
    private Color color = Color.BLACK;
    private Boolean relleno = false;
    private Boolean mover = false;

    /**
     * Creates new form Lienzo
     */
    public Lienzo() {
        initComponents();
    }
    
    @Override
    public void paint(Graphics g) {
        super.paint(g);
        Graphics2D g2d = (Graphics2D) g;
        
        g2d.setPaint(color);
        for(Shape s: vShape) {
            if (relleno) g2d.fill(s);
            g2d.draw(s);
        }
    }
    
    public void limpiarLienzo() {
        this.forma = new MiLinea.Float();
        this.repaint();
    }
    
    private Shape getSelectedShape(Point2D p) {
        List<Shape> reversedList = this.vShape.reversed();
        for (Shape s: reversedList) {
            if (s.contains(p)) return s;
        }
        
        return null;
    }

    public Shape getForma() {
        return forma;
    }

    public void setForma(Shape forma) {
        this.forma = forma;
    }

    public HerramientaDibujo getHerramienta() {
        return herramienta;
    }

    public void setHerramienta(HerramientaDibujo herramienta) {
        this.herramienta = herramienta;
    }

    public Color getColor() {
        return color;
    }

    public void setColor(Color color) {
        this.color = color;
    }

    public Boolean getRelleno() {
        return relleno;
    }

    public void setRelleno(Boolean relleno) {
        this.relleno = relleno;
    }

    public Boolean getMover() {
        return mover;
    }

    public void setMover(Boolean mover) {
        this.mover = mover;
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        if (mover) {
            this.forma = this.getSelectedShape(evt.getPoint());
        } else {
            switch(herramienta){
            case HerramientaDibujo.LINE:
                this.forma = new MiLinea(evt.getPoint(), evt.getPoint());
                break;
            case HerramientaDibujo.RECTANGLE:
                this.pressedPoint = evt.getPoint();
                this.forma = new Rectangle2D.Float();
                break;
            case HerramientaDibujo.ELLIPSE:
                this.pressedPoint = evt.getPoint();
                this.forma = new Ellipse2D.Float();
                break;
            }
            this.vShape.add(forma);
        }
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        if (mover) {
            if (this.forma != null && forma instanceof Rectangle2D) {
                ((Rectangle2D)forma).setFrame(evt.getX(), evt.getY(), ((Rectangle2D)forma).getWidth(), ((Rectangle2D)forma).getHeight());
            }
            if (this.forma != null && forma instanceof Ellipse2D) {
                ((Ellipse2D)forma).setFrame(evt.getX(), evt.getY(), ((Ellipse2D)forma).getWidth(), ((Ellipse2D)forma).getHeight());
            }
            if (this.forma != null && forma instanceof MiLinea) {
                ((MiLinea)forma).setLocation(evt.getPoint());
            }
        } else {
            switch(herramienta){
                case HerramientaDibujo.LINE:
                    ((MiLinea)this.forma).setLine(((MiLinea)forma).getP1(), evt.getPoint());
                    break;
                case HerramientaDibujo.RECTANGLE:
                    ((Rectangle2D)this.forma).setFrameFromDiagonal(this.pressedPoint, evt.getPoint());
                    break;
                case HerramientaDibujo.ELLIPSE:
                    ((Ellipse2D)this.forma).setFrameFromDiagonal(this.pressedPoint, evt.getPoint());
                    break;
            }
        }
        this.repaint();
    }//GEN-LAST:event_formMouseDragged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
